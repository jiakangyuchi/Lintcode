http://www.lintcode.com/en/problem/missing-interval/

Given a sorted integer array where the range of elements are in the inclusive range [lower, upper], return its missing ranges.

Example
Given nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99
return ["2", "4->49", "51->74", "76->99"].

public class Solution {
    /*
     * @param nums: a sorted integer array
     * @param lower: An integer
     * @param upper: An integer
     * @return: a list of its missing ranges
     */
    public List<String> findMissingRanges(int[] nums, int lower, int upper) {
        int size = nums.length;
        long low = (long)lower;
        long up = (long)upper;
        List<String> result = new ArrayList<String>();
        
        if(size == 0){
            findResult(result, low, up);
            return result;   
        }
        
        if((long) nums[0] > low) findResult(result, low, (long) nums[0] - 1);
        
        for(int i = 0; i < size - 1; i ++){
                if((long) nums[i + 1] <= up) findResult(result, (long) nums[i] + 1, (long) nums[i + 1] - 1);
        }
        
        if((long) nums[size - 1] < up) findResult(result, (long) nums[size - 1] + 1, up);
        return result;
    }
    
    public void findResult(List<String>result, long val, long next){
        if(val == next) result.add(val + "");
        else if(val > next) return;
        else result.add(val + "->" + next);
    }
}
